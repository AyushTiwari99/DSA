public class C_Binary_Trees {
    static class Node
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
            left=right=null;
        }
    }
    static class BinaryTree
    {
        static int index=-1;
        public static Node buildTree(int nodes[])
        {
            index++;
            if(nodes[index]==-1) return null;
            Node newnode = new Node(nodes[index]);
            newnode.left=buildTree(nodes);
            newnode.right=buildTree(nodes);
            return newnode;
        }
    }
    public static int height(Node root)
    {
        if(root==null) return 0;
        int leftHeight=height(root.left);
        int rightHeight=height(root.right);
        int myHeight = Math.max(leftHeight,rightHeight)+1;
//        if(leftHeight>rightHeight) return leftHeight+1;
//        else return rightHeight+1;
        return myHeight;
    }
    public static int diameter(Node root)
    {
        if(root==null) return 0;
        int diam1=diameter(root.left);
        int diam2=diameter(root.right);
        int diam3 = height(root.left)+height(root.right)+1;
        return Math.max(diam3, Math.max(diam1,diam2));
    }
    static class TreeInfo
    {
        int ht;
        int diam;
        TreeInfo(int ht,int diam)
        {
            this.ht=ht;
            this.diam=diam;
        }
    }
    public static TreeInfo diameter2(Node root)
    {
        if(root==null)  return new TreeInfo(0,0);
        TreeInfo left = diameter2(root.left);
        TreeInfo right = diameter2(root.right);
        int myHeight=Math.max(left.ht,right.ht)+1;
        int diam1= left.diam;
        int diam2= right.diam;
        int diam3=left.ht+right.ht+1;
        int mydiam= Math.max(Math.max(diam1,diam2),diam3);
        TreeInfo myInfo = new TreeInfo(myHeight,mydiam);
        return myInfo;
    }

    public static void main(String[] args) {
        int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree tree = new BinaryTree();
        Node root= tree.buildTree(nodes);
//        System.out.println(diameter(root));
        System.out.println(diameter2(root).diam);
    }
}
