class TreeNode
{
    int value;
    TreeNode left;
    TreeNode right;
    TreeNode(int value)
    {
        this.value=value;
        left=right=null;
    }
}
public class subTree
{
    TreeNode root,subRoot;
    public boolean isIdentical(TreeNode root,TreeNode subRoot)
    {
        if(root==null && subRoot==null) return true;
        if(root==null || subRoot==null) return false;
        if(root.value==subRoot.value) {
            return isIdentical(root.left, subRoot.left) && isIdentical(root.right, subRoot.right);
        }
        return false;
    }
    public boolean isSubtree(TreeNode root , TreeNode subRoot)
    {
        if(subRoot==null) return true;
        if(root==null) return false;
        if(root.value==subRoot.value)
        {
            if(isIdentical(root,subRoot)) return true;
        }
        return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
    }

    public static void main(String[] args) {
        subTree tree = new subTree();
        tree.root = new TreeNode(26);
        tree.root.right = new TreeNode(3);
        tree.root.right.right = new TreeNode(3);
        tree.root.left = new TreeNode(10);
        tree.root.left.left = new TreeNode(4);
        tree.root.left.left.right = new TreeNode(30);
        tree.root.left.right = new TreeNode(6);

        tree.subRoot = new TreeNode(10);
        tree.subRoot.right = new TreeNode(6);
        tree.subRoot.left = new TreeNode(4);
        tree.subRoot.left.right = new TreeNode(30);

        if (tree.isSubtree(tree.root, tree.subRoot))
            System.out.println("Tree 2 is subtree of Tree 1 ");
        else
            System.out.println("Tree 2 is not a subtree of Tree 1");

    }
}
